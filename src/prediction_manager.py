# —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª src/prediction_manager.py –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —ç—Ç–æ—Ç –∫–æ–¥
import numpy as np
from sklearn.linear_model import LinearRegression
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class PredictionManager:
    def __init__(self):
        self.models = {}
        self.last_predictions = {}
        self.last_prediction_prices = {}
        self.pending_predictions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        
    def store_prediction(self, symbol: str, prediction: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            if symbol not in self.pending_predictions:
                self.pending_predictions[symbol] = []
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            for timeframe, pred_data in prediction['predictions'].items():
                check_time = prediction['timestamp'] + timedelta(minutes=timeframe)
                self.pending_predictions[symbol].append({
                    'check_time': check_time,
                    'predicted_price': pred_data['price'],
                    'range_low': pred_data['range_low'],
                    'range_high': pred_data['range_high'],
                    'timeframe': timeframe,
                    'original_prediction': prediction
                })
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.pending_predictions[symbol].sort(key=lambda x: x['check_time'])
            
        except Exception as e:
            logger.error(f"Error storing prediction: {str(e)}")
            
    def get_prediction_accuracy_message(self, prediction: dict, actual_price: float, timeframe: int) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            predicted_price = prediction['predicted_price']
            deviation = abs(actual_price - predicted_price)
            deviation_percent = (deviation / predicted_price) * 100
            
            within_range = prediction['range_low'] <= actual_price <= prediction['range_high']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            direction = "–≤—ã—à–µ" if actual_price > predicted_price else "–Ω–∏–∂–µ"
            
            message = (
                f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ({timeframe} –º–∏–Ω)\n"
                f"–ü–∞—Ä–∞: {prediction['original_prediction']['symbol']}\n\n"
                f"üéØ –ü—Ä–æ–≥–Ω–æ–∑: {predicted_price:.8f}\n"
                f"üìå –§–∞–∫—Ç: {actual_price:.8f}\n"
                f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation_percent:.2f}%\n"
                f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction} –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
                f"üìê –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {'‚úÖ' if within_range else '‚ùå'}\n\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞:\n"
                f"‚¨ÜÔ∏è –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: {prediction['range_high']:.8f}\n"
                f"‚¨áÔ∏è –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: {prediction['range_low']:.8f}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏
            if deviation_percent < 1:
                message += "üéØ –û—á–µ–Ω—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑!"
            elif deviation_percent < 2:
                message += "‚úÖ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑"
            elif deviation_percent < 5:
                message += "üìä –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
            else:
                message += "‚ùå –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
                
            return message
            
        except Exception as e:
            logger.error(f"Error creating accuracy message: {str(e)}")
            return None
        
    def is_significant_change(self, symbol: str, current_price: float, min_change_percent: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        """
        try:
            if symbol not in self.last_prediction_prices:
                self.last_prediction_prices[symbol] = current_price
                return True
                
            last_price = self.last_prediction_prices[symbol]
            price_change_percent = abs((current_price - last_price) / last_price * 100)
            
            if price_change_percent >= min_change_percent:
                self.last_prediction_prices[symbol] = current_price
                return True
                
            return False
            
        except Exception as e:
            logger.error(f"Error checking significant change: {str(e)}")
            return False
        
    def calculate_trend_strength(self, prices):
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        try:
            X = np.arange(len(prices)).reshape(-1, 1)
            y = np.array(prices)
            model = LinearRegression()
            model.fit(X, y)
            slope = model.coef_[0]
            r_squared = model.score(X, y)
            return slope, r_squared
        except Exception as e:
            logger.error(f"Error calculating trend strength: {str(e)}")
            return 0, 0

    def get_prediction(self, symbol: str, price_data: list, timeframes: list = [5, 15]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            if len(price_data) < 30:
                return None

            prices = [float(p['close']) for p in price_data[-30:]]
            current_price = prices[-1]
            
            # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞
            slope, r_squared = self.calculate_trend_strength(prices)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if abs(slope) < 0.0001:
                trend = "–ë–æ–∫–æ–≤–æ–π"
            elif slope > 0:
                trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π"
            else:
                trend = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"

            # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = np.std(prices) / np.mean(prices) * 100

            # –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
            predictions = {}
            for tf in timeframes:
                future_price = current_price + (slope * tf)
                range_width = (volatility * current_price) / 100
                predictions[tf] = {
                    'price': future_price,
                    'range_low': future_price - range_width,
                    'range_high': future_price + range_width
                }

            return {
                'symbol': symbol,
                'current_price': current_price,
                'trend': trend,
                'trend_strength': abs(r_squared * 100),
                'volatility': volatility,
                'predictions': predictions,
                'timestamp': datetime.now()
            }

        except Exception as e:
            logger.error(f"Error generating prediction for {symbol}: {str(e)}")
            return None

    def format_prediction_message(self, prediction):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        try:
            if not prediction:
                return None

            next_prediction_time = prediction['timestamp'] + timedelta(minutes=15)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
            message = (
                f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {prediction['symbol']}\n\n"
                f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {prediction['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ: {next_prediction_time.strftime('%H:%M:%S')}\n\n"
                f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {prediction['current_price']:.8f}\n"
                f"üìà –¢—Ä–µ–Ω–¥: {prediction['trend']}\n"
                f"üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {prediction['trend_strength']:.1f}%\n"
                f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {prediction['volatility']:.1f}%\n\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑:\n"
            )

            for tf, pred in prediction['predictions'].items():
                message += (
                    f"\n{tf} –º–∏–Ω—É—Ç:\n"
                    f"–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞: {pred['price']:.8f}\n"
                    f"–î–∏–∞–ø–∞–∑–æ–Ω: {pred['range_low']:.8f} - {pred['range_high']:.8f}\n"
                )

            return message

        except Exception as e:
            logger.error(f"Error formatting prediction message: {str(e)}")
            return None

    def analyze_prediction_accuracy(self, symbol: str, prediction_data: dict, actual_price: float):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            predicted_price = prediction_data['predictions'][15]['price']
            error_percent = abs(actual_price - predicted_price) / predicted_price * 100
            
            accuracy = 100 - error_percent
            
            within_range = (
                prediction_data['predictions'][15]['range_low'] <= actual_price <= 
                prediction_data['predictions'][15]['range_high']
            )
            
            return {
                'accuracy': accuracy,
                'within_range': within_range,
                'error_percent': error_percent
            }
            
        except Exception as e:
            logger.error(f"Error analyzing prediction accuracy: {str(e)}")
            return None