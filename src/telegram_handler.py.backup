import telegram
import logging
from datetime import datetime
import asyncio
from typing import Optional, Dict, Any
import pandas as pd

logger = logging.getLogger(__name__)

class TelegramHandler:
    def __init__(self, token: str, channel_id: str):
        self.bot = telegram.Bot(token=token)
        self.channel_id = channel_id
        self.message_queue = asyncio.Queue()
        logger.info(f"Telegram handler initialized for channel: {channel_id}")

    async def send_analysis_update(self, symbol: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            current_price = data['current_price']
            ema20 = data['ema20']
            ema50 = data['ema50']
            rsi = data.get('rsi', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            trend = "DOWNTREND" if current_price < ema20 < ema50 else \
                   "UPTREND" if current_price > ema20 > ema50 else "SIDEWAYS"
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—ã –¥–æ EMA –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            ema20_distance = ((current_price - ema20) / ema20) * 100
            ema50_distance = ((current_price - ema50) / ema50) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
            trend_strength = "Strong" if abs(ema20_distance) > 1 else "Moderate" if abs(ema20_distance) > 0.5 else "Weak"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if trend == "UPTREND":
                if rsi > 70:
                    recommendation = "‚ö†Ô∏è OVERBOUGHT - Consider Taking Profits"
                else:
                    recommendation = "üü¢ BULLISH - Consider Long Positions"
            elif trend == "DOWNTREND":
                if rsi < 30:
                    recommendation = "‚ö†Ô∏è OVERSOLD - Watch for Reversal"
                else:
                    recommendation = "üî¥ BEARISH - Consider Short Positions"
            else:
                recommendation = "‚ö™Ô∏è NEUTRAL - Wait for Clear Signal"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üìä Market Analysis Update\n\n"
                f"Symbol: {symbol}\n"
                f"Current Price: {current_price:.8f}\n\n"
                f"Technical Indicators:\n"
                f"EMA20: {ema20:.8f} ({ema20_distance:+.2f}%)\n"
                f"EMA50: {ema50:.8f} ({ema50_distance:+.2f}%)\n"
                f"RSI: {rsi:.2f}\n\n"
                f"Analysis:\n"
                f"Trend: {trend} ({trend_strength})\n"
                f"Recommendation: {recommendation}\n\n"
                f"Additional Info:\n"
                f"‚Ä¢ Price-EMA20 Gap: {abs(ema20_distance):.2f}%\n"
                f"‚Ä¢ Price-EMA50 Gap: {abs(ema50_distance):.2f}%\n"
                f"Time: {timestamp}"
            )
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"Analysis update sent for {symbol}")
            
        except Exception as e:
            logger.error(f"Error sending analysis update: {str(e)}")

    async def send_signal(self, symbol: str, signal_type: str, price: float, analysis_info: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥"
            
            message = (
                f"{signal_emoji} Trading Signal\n\n"
                f"Symbol: {symbol}\n"
                f"Action: {signal_type}\n"
                f"Price: {price:.8f}\n\n"
                f"Analysis:\n{analysis_info}\n\n"
                f"Risk Management:\n"
                f"‚Ä¢ Set Stop Loss: -{1:.2f}%\n"
                f"‚Ä¢ Take Profit 1: +{2:.2f}%\n"
                f"‚Ä¢ Take Profit 2: +{3:.2f}%\n\n"
                f"Time: {timestamp}"
            )
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"Signal sent: {symbol} {signal_type}")
            
        except Exception as e:
            logger.error(f"Error sending signal: {str(e)}")

    async def send_trade_result(self, symbol: str, entry_price: float, 
                              exit_price: float, profit_loss: float, duration: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        try:
            profit_percent = (profit_loss / entry_price) * 100
            
            result_emoji = "üü¢" if profit_loss > 0 else "üî¥"
            
            message = (
                f"üìä Trade Result {result_emoji}\n\n"
                f"Symbol: {symbol}\n"
                f"Entry Price: {entry_price:.8f}\n"
                f"Exit Price: {exit_price:.8f}\n"
                f"P/L: {profit_loss:.8f} ({profit_percent:.2f}%)\n"
                f"Duration: {duration}\n\n"
                f"Performance Metrics:\n"
                f"‚Ä¢ ROI: {profit_percent:.2f}%\n"
                f"‚Ä¢ Annualized Return: {(profit_percent * 365 / float(duration.split()[0])):.2f}%\n"
                f"‚Ä¢ Risk/Reward Ratio: {abs(profit_percent):.2f}"
            )
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"Trade result sent: {symbol} P/L: {profit_loss:.8f}")
            
        except Exception as e:
            logger.error(f"Error sending trade result: {str(e)}")

    async def send_daily_summary(self, total_trades: int, successful_trades: int, 
                               total_profit_loss: float, win_rate: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d")
            
            message = (
                f"üìà Daily Trading Summary ({timestamp})\n\n"
                f"Performance Metrics:\n"
                f"‚Ä¢ Total Trades: {total_trades}\n"
                f"‚Ä¢ Successful Trades: {successful_trades}\n"
                f"‚Ä¢ Win Rate: {win_rate:.2f}%\n"
                f"‚Ä¢ Total P/L: {total_profit_loss:.8f} USDT\n\n"
                f"Risk Metrics:\n"
                f"‚Ä¢ Average Win: {total_profit_loss/successful_trades:.8f} USDT\n"
                f"‚Ä¢ Win/Loss Ratio: {win_rate/(100-win_rate):.2f}\n"
                f"‚Ä¢ Sharpe Ratio: {(total_profit_loss/total_trades)/(total_profit_loss/successful_trades):.2f}\n\n"
                f"Status: {'üü¢ Profitable Day' if total_profit_loss > 0 else 'üî¥ Loss Day'}"
            )
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"Daily summary sent")
            
        except Exception as e:
            logger.error(f"Error sending daily summary: {str(e)}")

    async def send_error(self, error_message: str, error_type: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            message = (
                f"‚ö†Ô∏è Error Alert\n\n"
                f"Time: {timestamp}\n"
                f"Type: {error_type if error_type else 'General Error'}\n"
                f"Message: {error_message}"
            )
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"Error alert sent: {error_type}")
            
        except Exception as e:
            logger.error(f"Error sending error alert: {str(e)}")
