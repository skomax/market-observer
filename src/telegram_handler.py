import telegram
from telegram.ext import Updater
import logging
from datetime import datetime
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

class TelegramHandler:
    def __init__(self, token: str, channel_id: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram"""
        try:
            self.bot = telegram.Bot(token=token)
            self.channel_id = channel_id
            self.updater = Updater(token=token, use_context=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.bot.get_me()
            logger.info(f"Telegram handler initialized for channel: {channel_id}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.send_message("ü§ñ Telegram connection established")
            
        except Exception as e:
            logger.error(f"Error initializing Telegram handler: {str(e)}")
            raise

    def send_message(self, message: str) -> bool:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            return True
        except Exception as e:
            logger.error(f"Error sending message: {str(e)}")
            return False

    def send_custom_message(self, message: str, message_type: str = "INFO") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"Sending {message_type} message to channel {self.channel_id}")
            return self.send_message(message)
        except Exception as e:
            logger.error(f"Error sending custom message: {str(e)}")
            return False

    def send_analysis_update(self, symbol: str, data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            trend = "UPTREND" if data['ema5'] > data['ema13'] else "DOWNTREND"
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            ema5_distance = ((data['current_price'] - data['ema5']) / data['ema5']) * 100
            ema13_distance = ((data['current_price'] - data['ema13']) / data['ema13']) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if data.get('signal_strength', 0) >= 70:
                recommendation = "üü¢ STRONG BUY"
            elif data.get('signal_strength', 0) >= 50:
                recommendation = "üü° CONSIDER BUY"
            elif data.get('signal_strength', 0) <= 30:
                recommendation = "üî¥ CONSIDER SELL"
            else:
                recommendation = "‚ö™Ô∏è NEUTRAL"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üìä Scalping Analysis Update\n\n"
                f"Symbol: {symbol}\n"
                f"Current Price: {data['current_price']:.8f}\n\n"
                f"Technical Indicators:\n"
                f"‚Ä¢ EMA5: {data['ema5']:.8f} ({ema5_distance:+.2f}%)\n"
                f"‚Ä¢ EMA13: {data['ema13']:.8f} ({ema13_distance:+.2f}%)\n"
                f"‚Ä¢ RSI: {data['rsi']:.2f}\n"
                f"‚Ä¢ MACD: {data['macd']:.8f}\n"
                f"‚Ä¢ Signal Line: {data['signal_line']:.8f}\n\n"
                f"Analysis:\n"
                f"‚Ä¢ Trend: {trend}\n"
                f"‚Ä¢ Signal Strength: {data.get('signal_strength', 0):.1f}%\n"
                f"‚Ä¢ Recommendation: {recommendation}\n\n"
                f"Time: {timestamp}"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"Error sending analysis update: {str(e)}")
            return False

    def send_signal(self, symbol: str, signal_type: str, price: float, analysis_info: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥"
            
            message = (
                f"{signal_emoji} SCALPING SIGNAL\n\n"
                f"Symbol: {symbol}\n"
                f"Action: {signal_type}\n"
                f"Price: {price:.8f}\n\n"
                f"{analysis_info}\n\n"
                f"Time: {timestamp}"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"Error sending signal: {str(e)}")
            return False

    def send_trade_result(self, symbol: str, entry_price: float, 
                         exit_price: float, profit_loss: float, duration: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        try:
            profit_percent = (profit_loss / (entry_price)) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
            if profit_percent > 2:
                result_emoji = "üü¢üü¢"
                status = "EXCELLENT"
            elif profit_percent > 0:
                result_emoji = "üü¢"
                status = "PROFITABLE"
            elif profit_percent > -1:
                result_emoji = "üü°"
                status = "SMALL LOSS"
            else:
                result_emoji = "üî¥"
                status = "LOSS"
            
            # –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            try:
                duration_minutes = float(duration.split(':')[1])
                hourly_return = profit_percent * (60 / duration_minutes)
            except:
                hourly_return = 0
            
            message = (
                f"üìä Trade Result {result_emoji}\n\n"
                f"Symbol: {symbol}\n"
                f"Status: {status}\n\n"
                f"Trade Details:\n"
                f"‚Ä¢ Entry Price: {entry_price:.8f}\n"
                f"‚Ä¢ Exit Price: {exit_price:.8f}\n"
                f"‚Ä¢ P/L: {profit_loss:.8f} ({profit_percent:+.2f}%)\n"
                f"‚Ä¢ Duration: {duration}\n\n"
                f"Performance Metrics:\n"
                f"‚Ä¢ Hourly Return: {hourly_return:.2f}%\n"
                f"‚Ä¢ Price Movement: {((exit_price - entry_price)/entry_price)*100:+.2f}%\n"
                f"‚Ä¢ Execution Quality: {abs(profit_percent/((exit_price - entry_price)/entry_price)*100):.0f}%\n\n"
                f"üéØ Trade Rating: {'‚≠ê'* (int(min(5, max(1, profit_percent + 3))))}"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"Error sending trade result: {str(e)}")
            return False

    def send_daily_summary(self, total_trades: int, successful_trades: int, 
                          total_profit_loss: float, win_rate: float) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è
            if win_rate >= 70:
                status_emoji = "üü¢üü¢"
                status = "EXCELLENT"
            elif win_rate >= 50:
                status_emoji = "üü¢"
                status = "GOOD"
            elif win_rate >= 40:
                status_emoji = "üü°"
                status = "MODERATE"
            else:
                status_emoji = "üî¥"
                status = "POOR"
            
            message = (
                f"üìà Daily Trading Summary {status_emoji}\n"
                f"Date: {timestamp}\n"
                f"Status: {status}\n\n"
                f"Performance Metrics:\n"
                f"‚Ä¢ Total Trades: {total_trades}\n"
                f"‚Ä¢ Successful Trades: {successful_trades}\n"
                f"‚Ä¢ Win Rate: {win_rate:.2f}%\n"
                f"‚Ä¢ Total P/L: {total_profit_loss:.8f} USDT\n\n"
                f"Average Metrics:\n"
                f"‚Ä¢ Avg. Profit per Trade: {total_profit_loss/total_trades:.8f} USDT\n"
                f"‚Ä¢ Avg. Win Rate: {win_rate:.2f}%\n"
                f"‚Ä¢ Success Ratio: {successful_trades}/{total_trades}\n\n"
                f"Rating: {'‚≠ê'* (int(min(5, max(1, win_rate/20))))}"\
                f"\n\nNext day target: {abs(total_profit_loss) * 1.2:.8f} USDT"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"Error sending daily summary: {str(e)}")
            return False

    def send_error(self, error_message: str, error_type: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            message = (
                f"‚ö†Ô∏è ERROR ALERT\n\n"
                f"Time: {timestamp}\n"
                f"Type: {error_type if error_type else 'General Error'}\n"
                f"Message: {error_message}\n\n"
                f"Please check the logs for more details."
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"Error sending error alert: {str(e)}")
            return False
